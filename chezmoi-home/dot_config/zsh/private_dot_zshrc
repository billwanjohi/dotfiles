# Start configuration added by Zim install {{{
#
# User configuration sourced by interactive shells
#

# -----------------
# Zsh configuration
# -----------------

#
# Input/output
#

# Set editor default keymap to emacs (`-e`) or vi (`-v`)
bindkey -e

# Prompt for spelling correction of commands.
#setopt CORRECT

# Customize spelling correction prompt.
#SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '

# -----------------
# Zim configuration
# -----------------

# Use degit instead of git as the default tool to install and update modules.
zstyle ':zim:zmodule' use 'degit'

# --------------------
# Module configuration
# --------------------

#
# git
#

# Set a custom prefix for the generated aliases. The default prefix is 'G'.
#zstyle ':zim:git' aliases-prefix 'g'

#
# input
#

# Append `../` to your input for each `.` you type after an initial `..`
#zstyle ':zim:input' double-dot-expand yes

#
# termtitle
#

# Set a custom terminal title format using prompt expansion escape sequences.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# If none is provided, the default '%n@%m: %~' is used.
#zstyle ':zim:termtitle' format '%1~'

#
# zsh-autosuggestions
#

# Disable automatic widget re-binding on each precmd. This can be set when
# zsh-users/zsh-autosuggestions is the last module in your ~/.zimrc.
ZSH_AUTOSUGGEST_MANUAL_REBIND=1

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
#ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=242'

#
# zsh-syntax-highlighting
#

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
#typeset -A ZSH_HIGHLIGHT_STYLES
#ZSH_HIGHLIGHT_STYLES[comment]='fg=242'

# ------------------
# Initialize modules
# ------------------

ZIM_HOME=${XDG_CACHE_HOME}/zim
# Download zimfw plugin manager if missing.
if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  if (( ${+commands[curl]} )); then
    curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  else
    mkdir -p ${ZIM_HOME} && wget -nv -O ${ZIM_HOME}/zimfw.zsh \
        https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
  fi
fi
# Install missing modules, and update ${ZIM_HOME}/init.zsh if missing or outdated.
if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi
# Initialize modules.
source ${ZIM_HOME}/init.zsh

# ------------------------------
# Post-init module configuration
# ------------------------------

#
# zsh-history-substring-search
#

zmodload -F zsh/terminfo +p:terminfo
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
for key ('^[[A' '^P' ${terminfo[kcuu1]}) bindkey ${key} history-substring-search-up
for key ('^[[B' '^N' ${terminfo[kcud1]}) bindkey ${key} history-substring-search-down
for key ('k') bindkey -M vicmd ${key} history-substring-search-up
for key ('j') bindkey -M vicmd ${key} history-substring-search-down
unset key
# }}} End configuration added by Zim install

# In which zsh file should I put X?
# https://unix.stackexchange.com/a/71258/32186

# .zshrc - interactive shell configuration
##########################################

## Options section
  setopt always_to_end          # when completing from the middle of a word, move the cursor to the end of the word
  setopt appendhistory          # Immediately append history instead of overwriting
unsetopt autocd                 # if only directory path is entered, cd there.
  setopt automenu
# setopt bang_hist              # Treat the '!' character specially during expansion.
  setopt complete_in_word       # allow completion from within a word/phrase
unsetopt completealiases        # autocomplete aliases https://unix.stackexchange.com/a/583743
  setopt correct                # spelling correction for commands
  setopt extendedglob           # Extended globbing. Allows using regular expressions with *
  setopt extended_history       # record timestamp of command in HISTFILE
# setopt hist_beep              # Beep when accessing nonexistent history.
  setopt hash_list_all          # hash everything before completion
  setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
  setopt hist_find_no_dups      # Do not display a line previously found.
  setopt hist_ignore_all_dups   # If a new command is a duplicate, remove the older one
  setopt hist_ignore_dups       # Don't record an entry that was just recorded again
  setopt hist_ignore_space      # ignore commands that start with space
# setopt hist_reduce_blanks     # Remove superfluous blanks before recording entry.
  setopt hist_save_no_dups      # Don't write duplicate entries in the history file.
  setopt hist_verify            # show command with history expansion to user before running it
  setopt inc_append_history     # add commands to HISTFILE in order of execution
  setopt list_ambiguous         # complete as much of a completion until it gets ambiguous.
  setopt listpacked
  setopt nobeep                 # No beep
  setopt nocaseglob             # Case insensitive globbing
unsetopt nocheckjobs            # Don't warn about running processes when exiting
  setopt nolisttypes
# setopt nomatch
# setopt notify
  setopt numericglobsort        # Sort filenames numerically when it makes sense
  setopt share_history          # share command history data
  setopt rcexpandparam          # Array expension with parameters

HISTFILE="${XDG_STATE_HOME}/zsh_history"
HISTSIZE=100000
SAVEHIST=100000
WORDCHARS=${WORDCHARS//\/[&.;]} # Don't consider certain characters part of the word

## Keybindings section

# avoid vim mode
# https://unix.stackexchange.com/a/5486/32186
bindkey -e

bindkey '^[[7~' beginning-of-line                               # Home key
bindkey '^[[H' beginning-of-line                                # Home key
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line                # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                                     # End key
bindkey '^[[F' end-of-line                                     # End key
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}" end-of-line                       # [End] - Go to end of line
fi
bindkey '^[[2~' overwrite-mode                                  # Insert key
bindkey '^[[3~' delete-char                                     # Delete key
bindkey '^[[C'  forward-char                                    # Right key
bindkey '^[[D'  backward-char                                   # Left key
bindkey '^[[5~' history-beginning-search-backward               # Page up key
bindkey '^[[6~' history-beginning-search-forward                # Page down key

# Navigate words with ctrl+arrow keys
bindkey '^[Oc' forward-word                                     #
bindkey '^[Od' backward-word                                    #
bindkey '^[[1;5D' backward-word                                 #
bindkey '^[[1;5C' forward-word                                  #
bindkey '^H' backward-kill-word                                 # delete previous word with ctrl+backspace
bindkey '^[[Z' undo                                             # Shift+tab undo last action

# Before plugin load
####################

# https://stackoverflow.com/a/10860628/684619
# Bash-like navigation
autoload -U select-word-style
select-word-style bash

# # zinit wait lucid \
# #     atinit"
# #         zstyle ':zshzoo:plugins:xdg-basedirs:*' apps \
# #             'docker' \
# #             'gnupg' \
# #             'less' \
# #             'tmux' \
# #             'readline'
# #     " \
# #     atload"export RIPGREP_CONFIG_PATH=$XDG_CONFIG_HOME/ripgreprc" blockf for \
# #     zshzoo/xdg-basedirs

###### User configuration

# use prefix to specify gnu version of a core utility on OSX
if [[ $OSTYPE != "linux-gnu" ]]; then
    gnu_prefix=g
fi

EMACS_TERM="emacsclient -ta emacs"  # console mode, launches new emacs if daemon not present

## Alias section
alias allrepos="fd --type d --hidden '.git$' ~"
alias apb='poetry run ansible-playbook -e "ansible_become_pass=$ANSIBLE_BECOME_PASS" -i inventory/'
alias cm="chezmoi"
alias cp="cp -i"  # Confirm before overwriting something
alias df="df -h"
alias findalias="alias | ag"
alias gcolt='git switch $(git tag | ${gnu_prefix}sort -V | tail -1)'
alias glfod="git ls-files --others --directory"
alias gitroot="git rev-parse --show-toplevel"
alias gdls='git switch -q $(git_main_branch) && git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base $(git_main_branch) $branch) && [[ $(git cherry $(git_main_branch) $(git commit-tree $(git rev-parse $branch\^{tree}) -p $mergeBase -m _)) == "-"* ]] && git branch -D $branch; done'
alias gpfwl="git push --force-with-lease"
alias grbfom='git fetch && git rebase --autostash -i $(git merge-base origin/$(git_main_branch) HEAD)'
alias gs="echo 'did you mean gss?'"
alias ls="lsd"
alias lsa="ls -alh"
alias lsat="ls -alh --tree"
alias lss="ls -A"
alias lt="lsd --tree"
alias neovim="nvim"
alias psql_log='psql -e -L ${XDG_STATE_HOME}/psql/logs/$(date +%Y_%m_%d).txt'
alias rsync="echo run as root"
alias screengrab="import"
alias te="$EMACS_TERM"
alias ttree="tree --filelimit 64 -aC -I .git"
alias vi="echo 'do you mean vim?'"
alias vim="echo 'did you mean nvim?'"
alias yes="echo no"
alias xo="xdg-open"

export PATH="$PATH:$HOME/.emacs.d/bin"  # doom/spacemacs utilities
source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc"

# https://github.com/dandavison/delta/issues/1167#issuecomment-1678568122
# can probably remove once we're on a version > 0.16.5
# https://github.com/dandavison/delta/releases
# https://github.com/dandavison/delta/commit/49a99180fed618b62ba773e3aebd8968b044262d
compdef _gnu_generic delta
